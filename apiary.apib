FORMAT: 1A
HOST: http://notecase.example.com/v1/

# Notecase

Notecase is a simple wallet microservice, suitable for for closed walled systems. It allows you to manage wallet accounts for your users while keeping track of recharges, spends, refunds and promotions. 

# Account Types
The Notecase system consists simply of accounts that allow the auditable flow of credit between them based on certain rules. There are broadly three kinds of supported accounts: 

1. **Wallets**: These are individual wallets that hold user credit balances. 
2. **Rechargers**: These are accounts that can recharge user wallets with credit - they are typically payment processors or loyalty programs. 
3. **Revenue**: These are the accounts that users spend their credit on. These may be product categories, like food and tickets, for example, or may be sales channels, like Web, iOS and Android. 

# Transaction Types
Once the accounts are set up, three kinds of trasnactions are possible:

1. **Recharge**: This recharges a wallet by withdrawing credit from a recharger - typically when a payment processor confirms a user's payment towards their wallet balance, or a loyalty award is given to the user.
2. **Spend**: The user spends the credit in their wallet, towards a product or service revenue account. This is a typical user purchase.
3. **Refund**: A revenue account either parially or fully returns a user's *spend*, typically because the purchse could not be completed or the product was faulty.

# Double Entry Accounting
Notecase follows the double entry accounting protocol. This is how the API concepts relate to normal acounting practices:

* *Rechargers* are **Asset** accounts, and thus tend to have an internal negative balance.
* *Wallets* are **Liability** accounts, where the credit is owed to the users.
* *Revenues* are **Owner's Equity** accounts, because these are revnues that the owner of the system has earned.
* Going by the standard equation, **Assets = Liabilities + Owner's Equity**. This equation should always hold true, and is used internally and externally to balance the books.
* A *Recharge* transaction will move credit from a  Recharger (Asset) to a Wallet (Liability).
* A *Spend* transaction will move credit from a  Wallet (Liability) to a revenue account (Owner's Equity).
* A *Refund* transaction will move credit from a  Revenue account (Owner's Equity) to a Wallet (Liability).
## Group Account Management

These calls relate to account management, including creating accounts and checking balances.

## Wallet [/wallets/{id}]

Wallets are user accounts that hold their credit.

## Create a wallet account [POST]

This call is idempotent w.r.t the `ref` supplied. The JSON `data` is opaque and used only for the client's reference.

+ `ref` (string) - The external ID of the user wallet
+ `data` (object) - An arbitrary JSON data associated with this wallet

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }

## Recharger [/rechargers]

Rechargers are accounts that supply credit to user wallets.

## Create a recharger account [POST]

This call is idempotent w.r.t the `ref` supplied. The JSON `data` is opaque and used only for the client's reference.

+ `ref` (string) - The external ID for the recharger
+ `data` (object) - An arbitrary JSON data associated with this recharger

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }

## Revenue [/revenues]

Revenue accounts are those that receive credit from user wallets, usually in exchange for a product or service.

## Create a revenue account [POST]

This call is idempotent w.r.t the `ref` supplied. The JSON `data` is opaque and used only for the client's reference.

+ `ref` (string) - The external ID for the revenue stream
+ `data` (object) - An arbitrary JSON data associated with this recharger

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }


## Group Transactions

These calls deal with moving credit around in the system. 

