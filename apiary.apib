FORMAT: 1A
HOST: http://notecase.apiblueprint.org/

# Notecase

Notecase is a simple wallet microservice, suitable for for closed walled systems. It allows you to manage wallet accounts for your users while keeping track of recharges, spends, refunds and promotions. 

# Account Types
The Notecase system consists simply of accounts that allow the auditable flow of credit between them based on certain rules. There are broadly three kinds of supported accounts: 

1. **Wallets**: These are individual wallets that hold user credit balances. 
2. **Rechargers**: These are accounts that can recharge user wallets with credit - they are typically payment processors or loyalty programs. 
3. **Revenue**: These are the accounts that users spend their credit on. These may be product categories, like food and tickets, for example, or may be sales channels, like Web, iOS and Android. 

# Transaction Types
Once the accounts are set up, three kinds of trasnactions are possible:

1. **Recharge**: This recharges a wallet by withdrawing credit from a recharger - typically when a payment processor confirms a user's payment towards their wallet balance, or a loyalty award is given to the user.

2. **Spend**: The user spends the credit in their wallet, towards a product or service revenue account. This is a typical user purchase.
3. **Refund**: A revenue account either parially or fully returns a user's *spend*, typically because the purchse could not be completed or the product was faulty.

## Group Account Management

## Wallet [/wallets]

Wallets are user accounts that hold their credit.

## Create a wallet [POST]

+ ref (string) - The external ID of user wallet
+ data (object) - An arbitrary JSON data associated with this wallet

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }

## Recharger [/rechargers]

Rechargers are accounts that supply credit to user wallets.

## Create a recharger [POST]

+ ref (string) - The external ID for the recharger
+ data (object) - An arbitrary JSON data associated with this recharger

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }

## Revenue [/revenues]

Revenue accounts are those that receive credit from user wallets, usually in exchange for a product or service.

## Create a recharger [POST]

+ ref (string) - The external ID for the recharger
+ data (object) - An arbitrary JSON data associated with this recharger

+ Request (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            }
        }


+ Response 200 (application/json)

        {
            "ref": "ABCD1234",
            "data": {
                "k1": "v1"
            },
            "balance": 0.0
        }


## Group Transactions

Resources related to questions in the API.

## Question [/questions/{question_id}]

A Question object has the following attributes:

+ question
+ published_at - An ISO8601 date when the question was published.
+ url
+ choices - An array of Choice objects.

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer

### View a Questions Detail [GET]

+ Response 200 (application/json)

        {
            "question": "Favourite programming language?",
            "published_at": "2014-11-11T08:40:51.620Z",
            "url": "/questions/1",
            "choices": [
                {
                    "choice": "Swift",
                    "url": "/questions/1/choices/1",
                    "votes": 2048
                }, {
                    "choice": "Python",
                    "url": "/questions/1/choices/2",
                    "votes": 1024
                }, {
                    "choice": "Objective-C",
                    "url": "/questions/1/choices/3",
                    "votes": 512
                }, {
                    "choice": "Ruby",
                    "url": "/questions/1/choices/4",
                    "votes": 256
                }
            ]
        }

## Choice [/questions/{question_id}/choices/{choice_id}]

+ Parameters
    + question_id: 1 (required, number) - ID of the Question in form of an integer
    + choice_id: 1 (required, number) - ID of the Choice in form of an integer

### Vote on a Choice [POST]

This action allows you to vote on a question's choice.

+ Response 201

    + Headers

            Location: /questions/1

## Questions Collection [/questions{?page}]

+ Parameters
    + page: 1 (optional, number) - The page of questions to return

### List All Questions [GET]

+ Response 200 (application/json)

    + Headers

            Link: </questions?page=2>; rel="next"

    + Body

            [
                {
                    "question": "Favourite programming language?",
                    "published_at": "2014-11-11T08:40:51.620Z",
                    "url": "/questions/1",
                    "choices": [
                        {
                            "choice": "Swift",
                            "url": "/questions/1/choices/1",
                            "votes": 2048
                        }, {
                            "choice": "Python",
                            "url": "/questions/1/choices/2",
                            "votes": 1024
                        }, {
                            "choice": "Objective-C",
                            "url": "/questions/1/choices/3",
                            "votes": 512
                        }, {
                            "choice": "Ruby",
                            "url": "/questions/1/choices/4",
                            "votes": 256
                        }
                    ]
                }
            ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ question (string) - The question
+ choices (array[string]) - A collection of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2014-11-11T08:40:51.620Z",
                "url": "/questions/2",
                "choices": [
                    {
                        "choice": "Swift",
                        "url": "/questions/2/choices/1",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "url": "/questions/2/choices/2",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "url": "/questions/2/choices/3",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "url": "/questions/2/choices/4",
                        "votes": 0
                    }
                ]
            }
